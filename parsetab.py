
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIV ELSE FLOAT GT ID IF INT LBRACE LPAREN LT MINUS MULT NUMBER PLUS PRINT RBRACE READ RPAREN SEMICOLON WHILEprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : INT ID SEMICOLON\n                 | FLOAT ID SEMICOLONstatement : ID ASSIGN expression SEMICOLONstatement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE\n                 | IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEstatement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEstatement : PRINT LPAREN expression RPAREN SEMICOLONstatement : READ LPAREN ID RPAREN SEMICOLONexpression : expression PLUS term\n                  | expression MINUS term\n                  | expression GT term\n                  | expression LT term\n                  | termterm : term MULT factor\n            | term DIV factor\n            | factorfactor : NUMBER\n              | ID\n              | LPAREN expression RPAREN'
    
_lr_action_items = {'INT':([0,2,3,11,19,26,31,50,51,52,53,54,55,56,57,59,60,61,],[4,4,-2,-3,-4,-5,-6,4,4,-10,-11,4,4,-7,-9,4,4,-8,]),'FLOAT':([0,2,3,11,19,26,31,50,51,52,53,54,55,56,57,59,60,61,],[6,6,-2,-3,-4,-5,-6,6,6,-10,-11,6,6,-7,-9,6,6,-8,]),'ID':([0,2,3,4,6,11,13,15,16,17,18,19,25,26,31,32,33,34,35,36,37,50,51,52,53,54,55,56,57,59,60,61,],[5,5,-2,12,14,-3,20,20,20,20,30,-4,20,-5,-6,20,20,20,20,20,20,5,5,-10,-11,5,5,-7,-9,5,5,-8,]),'IF':([0,2,3,11,19,26,31,50,51,52,53,54,55,56,57,59,60,61,],[7,7,-2,-3,-4,-5,-6,7,7,-10,-11,7,7,-7,-9,7,7,-8,]),'WHILE':([0,2,3,11,19,26,31,50,51,52,53,54,55,56,57,59,60,61,],[8,8,-2,-3,-4,-5,-6,8,8,-10,-11,8,8,-7,-9,8,8,-8,]),'PRINT':([0,2,3,11,19,26,31,50,51,52,53,54,55,56,57,59,60,61,],[9,9,-2,-3,-4,-5,-6,9,9,-10,-11,9,9,-7,-9,9,9,-8,]),'READ':([0,2,3,11,19,26,31,50,51,52,53,54,55,56,57,59,60,61,],[10,10,-2,-3,-4,-5,-6,10,10,-10,-11,10,10,-7,-9,10,10,-8,]),'$end':([1,2,3,11,19,26,31,52,53,56,57,61,],[0,-1,-2,-3,-4,-5,-6,-10,-11,-7,-9,-8,]),'RBRACE':([3,11,19,26,31,52,53,54,55,56,57,60,61,],[-2,-3,-4,-5,-6,-10,-11,56,57,-7,-9,61,-8,]),'ASSIGN':([5,],[13,]),'LPAREN':([7,8,9,10,13,15,16,17,25,32,33,34,35,36,37,],[15,16,17,18,25,25,25,25,25,25,25,25,25,25,25,]),'SEMICOLON':([12,14,20,21,22,23,24,41,42,43,44,45,46,47,48,49,],[19,26,-21,31,-16,-19,-20,52,53,-12,-13,-14,-15,-17,-18,-22,]),'NUMBER':([13,15,16,17,25,32,33,34,35,36,37,],[24,24,24,24,24,24,24,24,24,24,24,]),'MULT':([20,22,23,24,43,44,45,46,47,48,49,],[-21,36,-19,-20,36,36,36,36,-17,-18,-22,]),'DIV':([20,22,23,24,43,44,45,46,47,48,49,],[-21,37,-19,-20,37,37,37,37,-17,-18,-22,]),'PLUS':([20,21,22,23,24,27,28,29,38,43,44,45,46,47,48,49,],[-21,32,-16,-19,-20,32,32,32,32,-12,-13,-14,-15,-17,-18,-22,]),'MINUS':([20,21,22,23,24,27,28,29,38,43,44,45,46,47,48,49,],[-21,33,-16,-19,-20,33,33,33,33,-12,-13,-14,-15,-17,-18,-22,]),'GT':([20,21,22,23,24,27,28,29,38,43,44,45,46,47,48,49,],[-21,34,-16,-19,-20,34,34,34,34,-12,-13,-14,-15,-17,-18,-22,]),'LT':([20,21,22,23,24,27,28,29,38,43,44,45,46,47,48,49,],[-21,35,-16,-19,-20,35,35,35,35,-12,-13,-14,-15,-17,-18,-22,]),'RPAREN':([20,22,23,24,27,28,29,30,38,43,44,45,46,47,48,49,],[-21,-16,-19,-20,39,40,41,42,49,-12,-13,-14,-15,-17,-18,-22,]),'LBRACE':([39,40,58,],[50,51,59,]),'ELSE':([56,],[58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,50,51,59,],[2,54,55,60,]),'statement':([0,2,50,51,54,55,59,60,],[3,11,3,3,11,11,3,11,]),'expression':([13,15,16,17,25,],[21,27,28,29,38,]),'term':([13,15,16,17,25,32,33,34,35,],[22,22,22,22,22,43,44,45,46,]),'factor':([13,15,16,17,25,32,33,34,35,36,37,],[23,23,23,23,23,23,23,23,23,47,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',6),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',11),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',12),
  ('statement -> INT ID SEMICOLON','statement',3,'p_statement_declaration','parser.py',20),
  ('statement -> FLOAT ID SEMICOLON','statement',3,'p_statement_declaration','parser.py',21),
  ('statement -> ID ASSIGN expression SEMICOLON','statement',4,'p_statement_assignment','parser.py',26),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_if','parser.py',31),
  ('statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','statement',11,'p_statement_if','parser.py',32),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_statement_while','parser.py',39),
  ('statement -> PRINT LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_print','parser.py',44),
  ('statement -> READ LPAREN ID RPAREN SEMICOLON','statement',5,'p_statement_read','parser.py',48),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',53),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',54),
  ('expression -> expression GT term','expression',3,'p_expression','parser.py',55),
  ('expression -> expression LT term','expression',3,'p_expression','parser.py',56),
  ('expression -> term','expression',1,'p_expression','parser.py',57),
  ('term -> term MULT factor','term',3,'p_term','parser.py',64),
  ('term -> term DIV factor','term',3,'p_term','parser.py',65),
  ('term -> factor','term',1,'p_term','parser.py',66),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',73),
  ('factor -> ID','factor',1,'p_factor','parser.py',74),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',75),
]
